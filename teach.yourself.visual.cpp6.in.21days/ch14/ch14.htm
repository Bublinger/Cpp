<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>

<HEAD>
	<META HTTP-EQUIV="Content-Type" CONTENT="text/html;CHARSET=iso-8859-1">
<SCRIPT LANGUAGE="JavaScript">

<!--

function popUp(pPage) {
 var fullURL = document.location;
 var textURL = fullURL.toString();
 var URLlen = textURL.length;
 var lenMinusPage = textURL.lastIndexOf("/");
 lenMinusPage += 1;
 var fullPath = textURL.substring(0,lenMinusPage);
 popUpWin = window.open('','popWin','resizable=yes,scrollbars=no,width=525,height=394');
 figDoc= popUpWin.document;
 zhtm= '<HTML><HEAD><TITLE>' + pPage + '</TITLE>';
 zhtm += '</head>';
 zhtm += '<BODY bgcolor="#FFFFFF">';
 zhtm += '<IMG SRC="' + fullPath + pPage + '">';
 zhtm += '<P><B>' + pPage + '</B>';
 zhtm += '</BODY></HTML>';
 window.popUpWin.document.write(zhtm);
 window.popUpWin.document.close();
 // Johnny Jackson 4/28/98
 }

//-->
                                                                
</SCRIPT>
<link rel="stylesheet" href="../../../../../../../../../../../../includes/stylesheets/ebooks.css">

	<META NAME="GENERATOR" Content="Symantec Visual Page Mac 1.1.1">
	<TITLE>Teach Yourself Visual C++ 6 in 21 Days -- Ch 14 -- Retrieving Data from an ODBC Database8</TITLE>
</HEAD>

<BODY TEXT="#000000" BGCOLOR="#FFFFFF">

<H1 ALIGN="CENTER"><IMG SRC="../button/sams.gif" WIDTH="171" HEIGHT="66" ALIGN="BOTTOM"
BORDER="0"><BR>
Teach Yourself Visual C++ 6 in 21 Days</H1>
<CENTER>
<P><A HREF="../ch13/ch13.htm"><IMG SRC="../button/previous.gif" WIDTH="128" HEIGHT="28"
ALIGN="BOTTOM" ALT="Previous chapter" BORDER="0"></A><A HREF="../ch15/ch15.htm"><IMG
SRC="../button/next.gif" WIDTH="128" HEIGHT="28" ALIGN="BOTTOM" ALT="Next chapter"
BORDER="0"></A><A HREF="../index.htm"><IMG SRC="../button/contents.gif" WIDTH="128"
HEIGHT="28" ALIGN="BOTTOM" ALT="Contents" BORDER="0"></A> 
<HR>

</CENTER>
<H1 ALIGN="CENTER">- 14 -<BR>
Retrieving Data from an ODBC Database</H1>
<H1></H1>

<UL>
	<LI><A HREF="#Heading1">Database Access and ODBC</A>
	<UL>
		<LI><A HREF="#Heading2">The Open Database Connector (ODBC) Interface</A>
		<LI><A HREF="#Heading3">The CRecordset Class</A>
	</UL>
	<LI><A HREF="#Heading4">Creating a Database Application Using ODBC</A>
	<UL>
		<LI><A HREF="#Heading5">Preparing the Database</A>
		<LI><A HREF="#Heading6">Creating the Application Shell</A>
		<LI><A HREF="#Heading7">Designing the Main Form</A>
		<LI><A HREF="#Heading8">Adding New Records</A>
		<LI><A HREF="#Heading9">Deleting Records</A>
	</UL>
	<LI><A HREF="#Heading10">Summary</A>
	<LI><A HREF="#Heading11">Q&amp;A</A>
	<LI><A HREF="#Heading12">Workshop</A>
	<UL>
		<LI><A HREF="#Heading13">Quiz</A>
		<LI><A HREF="#Heading14">Exercise</A>
	</UL>
	<LI><A HREF="#Heading15">In Review</A>
</UL>

<P>
<HR SIZE="4">
<BR>
A large number of applications use a database. Everything from a personal organizer
to a large, corporate personnel system uses a database to store and maintain all
the records that the applications use and manipulate. Visual C++ provides you with
four different technologies for using and accessing databases in your applications,
Data Access Objects (DAO), ODBC, OLE DB, and ActiveX Data Objects (ADO). Today and
tomorrow, you'll learn about two of these technologies, how they differ, and how
you can use them in your own applications. Today, you will learn</P>

<P>

<UL>
	<LI>How the ODBC interface allows you to use a consistent way to access a database.
	<P>
	<LI>How Visual C++ uses the CRecordset class to provide access to an ODBC data source.
	<P>
	<LI>How you can create a simple database application using the Wizards in Visual
	C++.
	<P>
	<LI>How you can add and delete records from an ODBC database in Visual C++.
</UL>

<H2><A NAME="Heading1"></A>Database Access and ODBC</H2>
<P>Most business applications work with data. They maintain, manipulate, and access
records of data that are stored in databases. If you build business applications,
odds are that you will need to be able to access a database with your applications.
The question is, which database?</P>
<P>There are a number of databases on the market. If you need to create a single-user
application that is self-contained on a single computer, you can use any one of numerous
PC-based databases, such as Microsoft's Access, FoxPro, or Borland's Paradox. If
you are building applications that need to access large, shared databases, you are
probably using an SQL-based (Structured Query Language) database such as SQL Server
or Oracle. All of these databases provide the same basic functionality, maintaining
records of data. Each will allow you to retrieve several records or a single record,
depending on your needs. They'll all let you add, update, or delete records as needed.
Any of these data- bases will be able to serve your application's needs, so you should
be able to use any database for one application and then switch to another for the
next application, based on the needs of the application and which database is most
suited for the specific application needs (or your employer's whim).</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>NOTE:</STRONG> To be completely honest, there are numerous differences between the
	various databases that are available today. Each of these databases has specific
	strengths and weaknesses, making one more suitable for a specific situation than
	another. However, a discussion of the differences between any of these databases
	is beyond the scope of this book. For the discussions of databases today and tomorrow,
	you can assume that all of these databases are functionally equal and interchangeable.
<HR>


</BLOCKQUOTE>

<P>The problem that you will encounter when you switch from one database to another
is that each database requires you to use a different interface for accessing the
database. Therefore, you have to learn and use a whole new set of programming techniques
and functions for each database that you need to work with. This is the problem that
the ODBC interface was designed to correct.</P>
<P>
<H3><A NAME="Heading2"></A>The Open Database Connector (ODBC) Interface</H3>
<P>Microsoft saw the incompatibility between database interfaces as a problem. Each
database had its own application development language that was well integrated with
the database but didn't work with any other database. This presented a problem to
any developer who needed to use one database for an application and then a different
database for the next application. The developer had to learn the specific development
language for each of the databases and couldn't use any languages that she already
knew. For programmers to work with any database with the programming language of
the developer's choice, they needed a standardized interface that works with every
database.</P>
<P>The Open Database Connector (ODBC) interface is implemented as a standard, SQL-based
interface that is an integral part of the Windows operating system. Behind this interface
are plug-ins for each database that take the ODBC function calls and convert them
into calls to the specific interface for that database. The ODBC interface also uses
a central set of database connection configurations, with a standardized way of specifying
and maintaining them. This setup allows programmers to learn and use a single database
interface for all databases. This also allowed programming language vendors to add
ODBC support into their languages and development tools to make database access all
but transparent.</P>
<P>
<H3><A NAME="Heading3"></A>The CRecordset Class</H3>
<P>In the Visual C++ development environment, most of the ODBC functionality has
been encapsulated into two classes, CRecordset and CDatabase. The CDatabase class
contains the database connection information and can be shared across an entire application.
The CRecordset class encapsulates a set of records from the database. The CRecordset
class allows you to specify a SQL query to be run, and the CRecordset class will
run the query and maintain the set of records that are returned by the database.
You can modify and update the records in the record set, and your changes will be
passed back to the database. You can add or delete records from the record set, and
those same actions can be passed back to the database.</P>
<P>
<H4>Connecting to the Database</H4>
<P>Before the CRecordset class can perform any other functions, it has to be connected
to a database. This is accomplished through the use of the CDatabase class. You don't
need to create or set the CDatabase instance; the first instance of the CRecordset
class does this for you. When you create an application using the AppWizard and choose
to include ODBC database support, the AppWizard includes the database connection
information in the first CRecordset-derived class that it creates. When this CRecordset
class is created without being passed a CDatabase object, it uses the default connection
information, which was added by the AppWizard, to create its own database connection.</P>
<P>
<H4>Opening and Closing the Record Set</H4>
<P>Once the CRecordset object is created and connected to the database, you need
to open the record set to retrieve the set of records from the database. Do this
by calling the Open member function of the CRecordset object. You can call this function
without any arguments if you want to take the default values for everything, including
the SQL statement to be executed.</P>
<P>The first argument to the Open function is the record set type. The default value
for this, AFX_DB_USE_DEFAULT_TYPE, is to open the record set as a snapshot set of
records. Table 14.1 lists the four types of record set types. Only two of these record
set types are available in the AppWizard when you are specifying the data source.</P>
<P>
<H4>TABLE 14.1. RECORD SET TYPES.</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><I>Type</I></TD>
		<TD ALIGN="LEFT"><I>Description</I></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">CRecordset::dynaset		</TD>
		<TD ALIGN="LEFT">A set of records that can be refreshed by calling the Fetch function so that changes
			made to the record set by other users can be seen.		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">CRecordset::snapshot		</TD>
		<TD ALIGN="LEFT">A set of records that cannot be refreshed without closing and then reopening the
			record set.		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">CRecordset::dynamic		</TD>
		<TD ALIGN="LEFT">Very similar to the CRecordset::dynaset type, but it is not available in many ODBC
			drivers.		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">CRecordset::forwardOnly		</TD>
		<TD ALIGN="LEFT">A read-only set of records that can only be scrolled from the first to the last record.		</TD>
	</TR>
</TABLE>
</P>
<P>The second argument to the Open function is the SQL statement that is to be executed
to populate the record set. If a NULL is passed for this argument, the default SQL
statement that was created by the AppWizard is executed.</P>
<P>The third argument is a set of flags that you can use to specify how the set of
records is to be retrieved into the record set. Most of these flags require an in-depth
understanding of the ODBC interface so you understand how the flags can and should
be used in your applications. Because of this, I'll discuss only a few of these flags
in Table 14.2.</P>
<P>
<H4>TABLE 14.2. RECORD SET OPEN FLAGS.</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><I>Flag</I></TD>
		<TD ALIGN="LEFT"><I>Description</I></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">CRecordset::none		</TD>
		<TD ALIGN="LEFT">The default value for this argument; specifies that no options affect how the record
			set is opened and used.		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">CRecordset::appendOnly		</TD>
		<TD ALIGN="LEFT">This flag prevents the user from being able to edit or delete any of the existing
			records in the record set. The user will only be able to add new records to the set
			of records. You cannot use this option with the CRecordset::readOnly flag.		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">CRecordset::readOnly		</TD>
		<TD ALIGN="LEFT">This flag specifies that the record set is read-only and no changes can be made by
			the user. You cannot use this option with the CRecordset::appendOnly flag.		</TD>
	</TR>
</TABLE>
</P>
<P>Once the user finishes working with the record set, you can call the Close function
to close the record set and free any resources used by the record set. The Close
function doesn't take any arguments.</P>
<P>
<H4>Navigating the Record Set</H4>
<P>Once you have a set of records retrieved from the database, you need to be able
to navigate the set of records (unless the set has only one record). The CRecordset
class provides several functions for navigating the record set, allowing you to move
the user to any record. Table 14.3 lists the functions that you use to navigate the
record set.</P>
<P>
<H4>TABLE 14.3. RECORD SET NAVIGATION FUNCTIONS.</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><I>Function</I></TD>
		<TD ALIGN="LEFT"><I>Description</I></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">MoveFirst		</TD>
		<TD ALIGN="LEFT">Moves to the first record in the set.		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">MoveLast		</TD>
		<TD ALIGN="LEFT">Moves to the last record in the set.		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">MoveNext		</TD>
		<TD ALIGN="LEFT">Moves to the next record in the set.		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">MovePrev		</TD>
		<TD ALIGN="LEFT">Moves to the previous record in the set.		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Move		</TD>
		<TD ALIGN="LEFT">Can be used to move a specific number of records from the current record or from
			the first record in the set.		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">SetAbsolutePosition		</TD>
		<TD ALIGN="LEFT">Moves to the specified record in the set.		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">IsBOF		</TD>
		<TD ALIGN="LEFT">Returns TRUE if the current record is the first record in the set.		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">IsEOF		</TD>
		<TD ALIGN="LEFT">Returns TRUE if the current record is the last record in the set.		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">GetRecordCount		</TD>
		<TD ALIGN="LEFT">Returns the number of records in the set.		</TD>
	</TR>
</TABLE>
</P>
<P>Of all of these navigation and informational functions, only two, Move and SetAbsolutePosition,
take any arguments. The SetAbsolutePosition function takes a single numeric argument
to specify the row number of the record toward which to navigate. If you pass 0,
it navigates to the beginning-of-file (BOF) position, whereas 1 takes you to the
first record in the set. You can pass negative numbers to this function to cause
it to count backward from the last record in the set. (For example, -1 takes you
to the last record in the set, -2 to the next-to-last record, and so on.)</P>
<P>The Move function takes two arguments. The first argument is the number of rows
to move. This can be a positive or negative number; a negative number indicates a
backward navigation through the record set. The second argument specifies how you
will move through the set of rows. The possible values for the second argument are
listed in Table 14.4 with descriptions of how they affect the navigation.</P>
<P>
<H4>TABLE 14.4. MOVE NAVIGATION TYPES.</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><I>Type</I></TD>
		<TD ALIGN="LEFT"><I>Description</I></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">SQL_FETCH_RELATIVE		</TD>
		<TD ALIGN="LEFT">Moves the specified number of rows from the current row.		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">SQL_FETCH_NEXT		</TD>
		<TD ALIGN="LEFT">Moves to the next row, ignoring the number of rows specified. The same as calling
			the MoveNext function.		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">SQL_FETCH_PRIOR		</TD>
		<TD ALIGN="LEFT">Moves to the previous row, ignoring the number of rows specified. The same as calling
			the MovePrev function.		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">SQL_FETCH_FIRST		</TD>
		<TD ALIGN="LEFT">Moves to the first row, ignoring the number of rows specified. The same as calling
			the MoveFirst function.		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">SQL_FETCH_LAST		</TD>
		<TD ALIGN="LEFT">Moves to the last row, ignoring the number of rows specified. The same as calling
			the MoveLast function.		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">SQL_FETCH_ABSOLUTE		</TD>
		<TD ALIGN="LEFT">Moves the specified number of rows from the start of the set of rows. The same as
			calling the SetAbsolutePosition function.		</TD>
	</TR>
</TABLE>

<H4>Adding, Deleting, and Updating Records</H4>
<P>Navigating a set of records from a database is only part of what you need to be
able to do. You also need to be able to add new records to the record set, edit and
update existing records, and delete records. These actions are all possible through
the various functions that the CRecordset class provides. The functions that you
will use to provide this functionality to the user are listed in Table 14.5.</P>
<P>
<H4>TABLE 14.5. RECORD SET EDITING FUNCTIONS.</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><I>Function</I></TD>
		<TD ALIGN="LEFT"><I>Description</I></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">AddNew		</TD>
		<TD ALIGN="LEFT">Adds a new record to the record set.		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Delete		</TD>
		<TD ALIGN="LEFT">Deletes the current record from the record set.		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Edit		</TD>
		<TD ALIGN="LEFT">Allows the current record to be edited.		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Update		</TD>
		<TD ALIGN="LEFT">Saves the current changes to the database.		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Requery		</TD>
		<TD ALIGN="LEFT">Reruns the current SQL query to refresh the record set.		</TD>
	</TR>
</TABLE>
</P>
<P>None of these functions takes any arguments. However, some of them require following
a few specific steps to get them to work correctly.</P>
<P>To add a new record to the database, you can call the AddNew function. The next
thing that you need to do is set default values in any of the fields that require
values, such as the key fields. Next, you must call the Update function to add the
new record to the database. If you try to navigate to another record before calling
the Update function, the new record will be lost. Once you save the new record, you
need to call the Requery function to refresh the record set so that you can navigate
to the new record and let the user edit it. This sequence of function calls typically
looks like the following:</P>
<P>
<PRE>// Add a new record to the record set
m_pSet.AddNew();
// Set the key field on the new record
m_pSet.m_AddressID = m_lNewID;
// Save the new record to the database
m_pSet.Update();
// Refresh the record set
m_pSet.Requery();
// Move to the new record
m_pSet.MoveLast();
</PRE>
<P>When you need to delete the current record, you can simply call the Delete function.
Once you delete the current record, you need to navigate to another record so the
user isn't still looking at the record that was just deleted. Once you delete the
current record, there is no current record until you navigate to another one. You
do not need to explicitly call the Update function because the navigation functions
call it for you. This allows you to write the following code to delete the current
record:</P>
<P>
<PRE>// Delete the current record
m_pSet.Delete();
// Move to the previous record
m_pSet.MovePrev();
</PRE>
<P>Finally, to allow the user to edit the current record, you need to call the Edit
function. This allows you to update the fields in the record with the new values
entered by the user or calculated by your application. Once all changes are made
to the current record, you need to call the Update function to save the changes:</P>
<P>
<PRE>// Allow the user to edit the current record
m_pSet.Edit();
// Perform all data exchange, updating the fields in the recordset
.
.
// Save the user's changes to the current record
m_pSet.Update();
</PRE>
<P>You might be wondering how you get to the fields in the records to update them.
When the AppWizard creates the CRecordset-derived class for your application, it
adds all the fields in the records that will be in the record set as member variables
in order of the record set class. As a result, you can access the member variables
in order to access and manipulate the data elements in the database records that
are members of the record set.</P>
<P>
<H2><A NAME="Heading4"></A>Creating a Database Application Using ODBC</H2>
<P>For the sample application that you will build today, you'll create an SDI application
with ODBC database support. The application will retrieve records from an ODBC database,
allowing the user to edit and update any of the records. You'll also add function-
ality to enable the user to add new records to the database and to delete records
from the database.</P>
<P>
<H3><A NAME="Heading5"></A>Preparing the Database</H3>
<P>Before you can begin building an application that uses a database, you need a
database to use with your application. Almost every database that you can purchase
for your applications comes with tools for creating a new database. You'll need to
use these tools to create your database and then use the ODBC administrator to configure
an ODBC data source for your new database.</P>
<P>For the sample application in this chapter, I used Access 95 to create a new database.
I used the Access Database Wizard to create the database, choosing the Address Book
database template as the database to be created. When the Database Wizard started,
I selected the default set of fields for including in the database and selected the
option to include sample data, as shown in Figure 14.1. I then accepted the rest
of the default settings offered in the Database Wizard.</P>
<P><A HREF="javascript:popUp('14fig01.gif')"><B>FIGURE 14.1.</B></A><B> </B><I>Including
sample data in the database.</I></P>

<P>Once you create the database, you need to configure an ODBC data source to point
to the database you just created. To do this, run the ODBC Administrator, which is
in the Control Panel on your computer.</P>
<P>Once in the ODBC Administrator, you'll add a new data source. You can do this
by clicking the Add button, as shown in Figure 14.2. This opens another dialog, which
allows you to select the database driver for the new data source, as shown in Figure
14.3. For the sample application that you will build today, because the database
was created using Access, select the Microsoft Access Driver and click the Finish
button.</P>
<P><A HREF="javascript:popUp('14fig03.gif')"><B>FIGURE 14.2.</B></A><B> </B><I>The
ODBC Data Source Administrator.</I></P>

<P><A HREF="javascript:popUp('14fig04.gif')"><B>FIGURE 14.3.</B></A><B> </B><I>The
Create New Data Source dialog.</I></P>

<P>In the ODBC Microsoft Access Setup dialog, shown in Figure 14.4, you'll provide
a short, simple name for the data source. Your application will use this name to
specify the ODBC data source configuration to use for the database connection, so
it should reflect the function that the database will be serving, or it should be
similar to the name of the application that will be using this database. For the
purposes of the sample application database, name your data source <B>TYVCDB</B>
(for Teach Yourself Visual C++ Database) and enter a description for the database
in the next field.</P>

<P>Once you enter a name and description for the data source, you need to specify
where the database is. Click the Select button and then specify the Access database
that you created. Once you finish configuring the ODBC data source for your database,
click the OK button to add the new data source to the ODBC Administrator. You can
click the OK button to finish the task and close the ODBC Administrator because you
are now ready to turn your attention to building your application.</P>

<P><A HREF="javascript:popUp('14fig05.gif')"><B>FIGURE 14.4.</B></A><B> </B><I>The
ODBC Microsoft Access 97 Setup dialog.</I></P>

<P><I></I>
<H3><A NAME="Heading6"></A>Creating the Application Shell</H3>
<P>For the sample application that you will build today, you'll create a standard
SDI-style application with database support. First, start a new project, selecting
the AppWizard, and give your application a suitable name, such as DbOdbc.</P>
<P>On the first AppWizard form, specify that you want to build an SDI application.
On the second AppWizard form, specify that you want to include Database view with
file support. Click the Data Source button to specify which data source you will
use in your application. In the Database Options dialog, specify that you are using
an ODBC data source, and select the ODBC configuration from the list that you configured
for your Access database, as shown in Figure 14.5. You can set the record set type
to either Snapshot or Dynaset.</P>
<P><A HREF="javascript:popUp('14fig06.gif')"><B>FIGURE 14.5.</B></A><B> </B><I>The
Database Options dialog.</I></P>

<P>Once you click the OK button, another dialog opens, presenting you with the available
tables in the database you selected. Select the Addresses table, as shown in Figure
14.6, and click the OK button to close this dialog and return to the AppWizard.</P>
<P>You can continue through the rest of the AppWizard, accepting all of the default
settings. When you reach the final AppWizard step, you'll notice that the AppWizard
is going to create an extra class. If you select this class, you'll see that it is
derived from the CRecordset class, and it is the record set class for your application.
You'll also notice that the view class is derived from the CRecordView class, which
is a descendent of the CFormView class, with some added support for database functionality.</P>
<P><A HREF="javascript:popUp('14fig07.gif')"><B>FIGURE 14.6.</B></A><B> </B><I>The
Select Database Tables dialog.</I></P>

<P><I></I>
<H3><A NAME="Heading7"></A>Designing the Main Form</H3>
<P>Once you create the application shell, you need to design the main form that will
be used for viewing and editing the database records. You can design this form using
the standard controls that are part of Visual C++, without adding any special ActiveX
controls. For designing the main form in your sample application, lay out the main
form as shown in Figure 14.7, and configure the controls with the properties specified
in Table 14.6.</P>


<BLOCKQUOTE>
	<P>
<HR>
<STRONG>TIP:</STRONG> If you want to save a little time when building the example, you can
	leave out most of the controls and database fields from the application. The key
	fields that you'll need to include are ID, First and Last Names, Birthdate, and Send
	Card. If you want to leave out the other fields from the application, that's fine.
<HR>


</BLOCKQUOTE>

<H4>TABLE 14.6. CONTROL PROPERTY SETTINGS.</H4>
<P>
<TABLE BORDER="1">
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT"><I>Object</I></TD>
		<TD ALIGN="LEFT"><I>Property</I></TD>
		<TD ALIGN="LEFT"><I>Setting</I></TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Static Text		</TD>
		<TD ALIGN="LEFT">ID		</TD>
		<TD ALIGN="LEFT">IDC_STATIC		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">			<P>
		</TD>
		<TD ALIGN="LEFT">Caption		</TD>
		<TD ALIGN="LEFT">ID:		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Edit Box		</TD>
		<TD ALIGN="LEFT">ID		</TD>
		<TD ALIGN="LEFT">IDC_EID		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Static Text		</TD>
		<TD ALIGN="LEFT">ID		</TD>
		<TD ALIGN="LEFT">IDC_STATIC		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">			<P>
		</TD>
		<TD ALIGN="LEFT">Caption		</TD>
		<TD ALIGN="LEFT">First Name:		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Edit Box		</TD>
		<TD ALIGN="LEFT">ID		</TD>
		<TD ALIGN="LEFT">IDC_EFNAME		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Static Text		</TD>
		<TD ALIGN="LEFT">ID		</TD>
		<TD ALIGN="LEFT">IDC_STATIC		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">			<P>
		</TD>
		<TD ALIGN="LEFT">Caption		</TD>
		<TD ALIGN="LEFT">Last Name:		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Edit Box		</TD>
		<TD ALIGN="LEFT">ID		</TD>
		<TD ALIGN="LEFT">IDC_ELNAME		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Static Text		</TD>
		<TD ALIGN="LEFT">ID		</TD>
		<TD ALIGN="LEFT">IDC_STATIC		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">			<P>
		</TD>
		<TD ALIGN="LEFT">Caption		</TD>
		<TD ALIGN="LEFT">Spouse Name:		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Edit Box		</TD>
		<TD ALIGN="LEFT">ID		</TD>
		<TD ALIGN="LEFT">IDC_ESNAME		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Static Text		</TD>
		<TD ALIGN="LEFT">ID		</TD>
		<TD ALIGN="LEFT">IDC_STATIC		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">			<P>
		</TD>
		<TD ALIGN="LEFT">Caption		</TD>
		<TD ALIGN="LEFT">Address:		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Edit Box		</TD>
		<TD ALIGN="LEFT">ID		</TD>
		<TD ALIGN="LEFT">IDC_EADDR		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">			<P>
		</TD>
		<TD ALIGN="LEFT">Multiline		</TD>
		<TD ALIGN="LEFT">Checked		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Static Text		</TD>
		<TD ALIGN="LEFT">ID		</TD>
		<TD ALIGN="LEFT">IDC_STATIC		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">			<P>
		</TD>
		<TD ALIGN="LEFT">Caption		</TD>
		<TD ALIGN="LEFT">City:		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Edit Box		</TD>
		<TD ALIGN="LEFT">ID		</TD>
		<TD ALIGN="LEFT">IDC_ECITY		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Static Text		</TD>
		<TD ALIGN="LEFT">ID		</TD>
		<TD ALIGN="LEFT">IDC_STATIC		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">			<P>
		</TD>
		<TD ALIGN="LEFT">Caption		</TD>
		<TD ALIGN="LEFT">State:		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Edit Box		</TD>
		<TD ALIGN="LEFT">ID		</TD>
		<TD ALIGN="LEFT">IDC_ESTATE		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Static Text		</TD>
		<TD ALIGN="LEFT">ID		</TD>
		<TD ALIGN="LEFT">IDC_STATIC		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">			<P>
		</TD>
		<TD ALIGN="LEFT">Caption		</TD>
		<TD ALIGN="LEFT">Zip:		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Edit Box		</TD>
		<TD ALIGN="LEFT">ID		</TD>
		<TD ALIGN="LEFT">IDC_EZIP		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Static Text		</TD>
		<TD ALIGN="LEFT">ID		</TD>
		<TD ALIGN="LEFT">IDC_STATIC		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">			<P>
		</TD>
		<TD ALIGN="LEFT">Caption		</TD>
		<TD ALIGN="LEFT">Country:		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Edit Box		</TD>
		<TD ALIGN="LEFT">ID		</TD>
		<TD ALIGN="LEFT">IDC_ECOUNTRY		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
		<TD ALIGN="LEFT">Static Text		</TD>
		<TD ALIGN="LEFT">ID		</TD>
		<TD ALIGN="LEFT">IDC_STATIC		</TD>
	</TR>
	<TR ALIGN="LEFT" VALIGN="TOP">
